name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  packages: write
  security-events: write
  actions: read

env:
  DOCKER_IMAGE: hroberts1/cryptobot-app
  SERVICE_NAME: cryptobot_api_gateway
  COMPONENT_NAME: api-gateway
  
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run tests
      run: go test -v ./...
      
    - name: Build application
      run: go build -v ./...
      
  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Set up environment variables
      id: env
      run: |
        # Use unified app repository with component-specific tags
        echo "docker_image=hroberts1/cryptobot-app" >> $GITHUB_OUTPUT
        echo "service_name=cryptobot_api_gateway" >> $GITHUB_OUTPUT
        echo "component_name=api-gateway" >> $GITHUB_OUTPUT
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Get current version and generate next version
      id: version
      run: |
        # Get current version from git tags
        current_version=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n1 || echo "v0.0.0")
        echo "current_version=$current_version" >> $GITHUB_OUTPUT
        
        # If workflow_dispatch, use the bump_type input, otherwise use patch
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          bump_type="${{ github.event.inputs.bump_type }}"
        else
          bump_type="patch"
        fi
        
        # Remove 'v' prefix for calculation
        version=${current_version#v}
        IFS='.' read -r major minor patch <<< "$version"
        
        # Ensure variables are set even if version is empty or malformed
        major=${major:-0}
        minor=${minor:-0}
        patch=${patch:-0}
        
        # Validate that they are actually numbers
        if ! [[ "$major" =~ ^[0-9]+$ ]]; then major=0; fi
        if ! [[ "$minor" =~ ^[0-9]+$ ]]; then minor=0; fi
        if ! [[ "$patch" =~ ^[0-9]+$ ]]; then patch=0; fi
        
        # Increment based on bump type
        case $bump_type in
          major)
            major=$((major + 1))
            minor=0
            patch=0
            ;;
          minor)
            minor=$((minor + 1))
            patch=0
            ;;
          patch)
            patch=$((patch + 1))
            ;;
        esac
        
        new_version="v$major.$minor.$patch"
        echo "new_version=$new_version" >> $GITHUB_OUTPUT
        echo "bump_type=$bump_type" >> $GITHUB_OUTPUT
        
        # Generate component-specific tags
        echo "component_version_tag=$new_version-api-gateway" >> $GITHUB_OUTPUT
        echo "component_latest_tag=api-gateway-latest" >> $GITHUB_OUTPUT
        
    - name: Build and push Docker image
      id: docker_build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ steps.env.outputs.docker_image }}:${{ steps.version.outputs.component_version_tag }}
          ${{ steps.env.outputs.docker_image }}:${{ steps.version.outputs.component_latest_tag }}
          ${{ steps.env.outputs.docker_image }}:${{ steps.version.outputs.new_version }}
        labels: |
          org.opencontainers.image.title=${{ steps.env.outputs.service_name }}
          org.opencontainers.image.description=${{ steps.env.outputs.service_name }} API Gateway
          org.opencontainers.image.version=${{ steps.version.outputs.new_version }}
          org.opencontainers.image.component=${{ steps.env.outputs.component_name }}
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Create and push git tag after successful build
      if: success()
      run: |
        echo "🏷️ Creating git tag ${{ steps.version.outputs.new_version }}"
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git tag -a "${{ steps.version.outputs.new_version }}" -m "Release ${{ steps.version.outputs.new_version }} - Auto-generated after successful Docker build"
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git "${{ steps.version.outputs.new_version }}"
        echo "✅ Successfully tagged and pushed ${{ steps.version.outputs.new_version }}"
        
    - name: Update Docker Hub description
      uses: peter-evans/dockerhub-description@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ steps.env.outputs.docker_image }}
        readme-filepath: ./README.md
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      if: github.event_name == 'push'
      with:
        image-ref: '${{ steps.env.outputs.docker_image }}:${{ steps.version.outputs.component_latest_tag }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.event_name == 'push'
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true
        
    - name: Summary
      if: success()
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Previous Version:** ${{ steps.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **New Version:** ${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Component:** ${{ steps.env.outputs.component_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Bump Type:** ${{ steps.version.outputs.bump_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Images:**" >> $GITHUB_STEP_SUMMARY
        echo "  - \`${{ steps.env.outputs.docker_image }}:${{ steps.version.outputs.component_version_tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "  - \`${{ steps.env.outputs.docker_image }}:${{ steps.version.outputs.component_latest_tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "  - \`${{ steps.env.outputs.docker_image }}:${{ steps.version.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
        if [ -f "trivy-results.sarif" ]; then
          echo "- **Security Scan:** Results uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY
        fi
